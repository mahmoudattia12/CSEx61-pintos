             +--------------------------+
             |          CS 140          |
             | PROJECT 2: USER PROGRAMS |
             |     DESIGN DOCUMENT      |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Mahmoud Attia <es-mahmoudattia2025@alexu.edu.eg>
Mohamed Hassan <es-MohamedH.Sadek2025@alexu.edu.eg>
Mahmoud Ali <es-MahmoudAli2025@alexu.edu.eg>
Adel Mahmoud <es-AdelMahmoud2025@alexu.edu.eg>
Abdelrahman Elsayed <es-abdulrahmanelsayed2025@alexu.edu.eg>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
        <<thread.h>>
1) struct thread {
     struct thread* parent; ---> pointer to the parent of the thread to be helpful in communication link between parent and child.
     struct list child_list; ---> list of the children processes.
     struct list_elem child_elem; ---> struct for the list of the process's children.
     struct file* execFile; ---> pointer to the executable file the thread executes. it is set in load function by the thread.
     int childState; ---> to set the child's status (i.e. its exit code) to the parent when the parent is waiting on it.
     bool createdSucc; ---> some mean of communication between parent and child as this will help us detecting whether the child creation status (succeeded or failed).
     struct semaphore waitChildExecution; ---> semaphore used to make the parent wait on the child to finish execution.
     struct semaphore waitChildLoading; ---> semaphore used to make the parent be blocked till the child process is loaded and sets its status to the parent.
   };
---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
  Ans: strtok_r() is similar to strtok() but it is safer than it.
  -The reason for that is that strok() uses a global variable to keep track of the string position. So using strtok() in multiple strings 
  simultaneously may lead to race conditions.
 
>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
  Ans: 
    1) letting the shell to do separation of desired executable command and arguments, will reduce a lot of overhead occurs as it validates first that the command
    and arguments are valid or not before passing to the kernel, and the kernel doesn't care about this.
    2) Making the shell separate the command from arguments will make the validation and separation done in the user mode rather than kernel mode
    which makes the code is abstracted and organized.
                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---(1) Added in syscall.c

       the only global lock, that we use to avoid race condition of files
      
         static struct lock lock;

       A struct for the file descriptor entry
      
          struct fd_entry
          {
             int fd;  -->the index of entry in the table
             struct file *file;  --> file pointer 
             struct list_elem elem; --> list to put the struct on (resources of the file).
          };

---(2) Added two new element in struct thread in thread.h to use it in the  functions for files
      --> struct list file_list; --> list of files open by thread
      --> int fileDirectory; --> counter of the file directory
      
---(3) Added struct opened_file in thread.h
      struct opened_file{ -->struct to open the file by the current thread
   	int fileDescriptor;
   	struct file* ptr; -->file pointer
   	struct list_elem elem; -->list resources of the file
      };


>> B2: Describe how file descriptors are associated with open files.

---> in the function open which called when open the file it created 
open from struct opened_file and allocate page for it after that 
increment fileDirectory for the current thread and assign it in the fileDescriptor of open and push the open in the (list) of opened file.
  
>> Are file descriptors unique within the entire OS or just within a
>> single process?

---> it is unique just just within a single process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

---> checked in the first if fd is 0 then read from keyboard or 1 then print 
in monitor else get the file with fd if it is -1 then no file and return -1
else then the file is found and write or read from it.


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

---> At least 1 and at most 2.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.


---> when the parent call the wait function it pass the pid(thread id) 
first check if there is child with this pid or not 
if true the parent remove the child and wake up and the parent will block 
it self until the child finish the execution and before the child terminate
it will set its status to parent and unblock the parent then will terminate.

if fale will return -1

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

--->At any function which use pointer from the stack it is checked first 
if it is not NULL and valid pointer to use it .
for example, in the syscall_handler check the pointer the esp if it valid 
before use it.

in the code we seperate the code for handling code in seperate function 
for example, the function validate_void_ptr(const void *pt) to validate that the address provided by the user is not null and inside my user space
 and it's mapped in the page table (have a physical address)


---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

---> by checking the flag (createdSucc) .this flag is held by the parent
process and when the load is terminated, the child process will update
that flag.
 
>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---> before C exits : will make sema up for wait child loading 
(c->​ wait child loading )
and make sema_down(p->​ waitChildExecution). ​ So the child process will
start to execute and when it exits, it makes sema_up
(p->​waitChildExecution).

---> After C exits : This case won’t happen because when 
 the parent spawns the child, the child will be blocked until the parent
  is waiting for that child or the parent is terminated.

---> How do you ensure that all resources are freed in each case?
  When the parent process is terminated, it will iterate on
child_list to wake up all blocked children and iterate on
opened_file_list to close all opened files and it will free the memory of
the struct holding the file by (filesys_remove(file)).

How about when P terminates without waiting, before C exits?
--->When the parent terminates, it will wake up all its children
and the children will execute and terminates also without any problem.

How about when P terminates without waiting, After C exits?
---> This case won’t happen because when 
the parent spawns the child, the child will be blocked until the parent
is waiting for that child or the parent is terminated.

Are there any special cases?
--> No,there aren't any special cases.
 
---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

---> No need for implement function for accessing to user memory , we use functions implemented already in paintos to access in the file pagedir.c

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

---> Adventages,it is characterized by being simple, easy and clear and 
it tests the file that returns from the list when using the pointer, that it 
already exists and is not null, and it provides a suitable interface for 
dealing with filesing with.

Disadventages,It is based on the assumption that there is one process will 
deal with one file for example, if there is a process read or write from 
file no other files will be read or written.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

---> No changes occurred.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
